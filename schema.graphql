schema {
  query: Query
  mutation: Mutation
  subscription: Subscription
}

type Subscription {
  addedPost: Post @aws_subscribe(mutations: ["createPost"])
  updatedPost: Post @aws_subscribe(mutations: ["updatePost"])
}

type Query {
  getUsers(
    page: Int
    limit: Int
    search: String
    lowerRange: AWSDateTime
    higherRange: AWSDateTime
    sortBy: String
    active: Boolean
  ): UserSearch @aws_cognito_user_pools(cognito_groups: ["superadmin"])
  getUser(_id: ID!): User @aws_api_key @aws_cognito_user_pools
  getUserByCognitoUserId(userId: String!): User
  getLists(page: Int, limit: Int, active: Boolean): Lists
  getList(_id: ID!): List
  getPosts(page: Int, limit: Int, sortBy: String, search: String): Posts
  getMyPosts(page: Int, limit: Int, sortBy: String, search: String): Posts
  getPostsByUserId(
    userId: ID!
    page: Int
    limit: Int
    sortBy: String
    search: String
  ): Posts @aws_api_key @aws_cognito_user_pools
  getPost(_id: ID!): Post
  getMyBookmarks(
    page: Int
    limit: Int
    sortBy: String
    search: String
  ): Bookmarks
  getBookmark(_id: ID!): Bookmark
}

type Mutation {
  createUser(
    userId: String!
    name: String!
    email: String!
    picture: String
  ): User @aws_cognito_user_pools(cognito_groups: ["superadmin"])
  updateUser(
    userId: String!
    updatedBy: String!
    name: String
    email: String
    picture: String
    subscription: SubscriptionInput
  ): User
  updateUserStatus(userId: String!, updatedBy: String!, status: Boolean!): User
    @aws_cognito_user_pools(cognito_groups: ["superadmin"])
  cancelUserSubscription(userId: String!): User
  createList(name: String!, active: Boolean, items: [ListItemInput]): List
    @aws_cognito_user_pools(cognito_groups: ["superadmin"])
  updateList(
    _id: ID!
    name: String
    active: Boolean
    inUse: Boolean
    items: [ListItemInput]
  ): List @aws_cognito_user_pools(cognito_groups: ["superadmin"])
  deleteList(_id: ID!): Boolean
    @aws_cognito_user_pools(cognito_groups: ["superadmin"])
  addListItem(
    listId: ID!
    title: String
    description: String
    active: Boolean
    media: [MediaInput]
  ): List @aws_cognito_user_pools(cognito_groups: ["superadmin"])
  updateListItem(
    listId: ID!
    _id: ID!
    title: String
    description: String
    active: Boolean
    media: [MediaInput]
  ): List @aws_cognito_user_pools(cognito_groups: ["superadmin"])
  deleteListItem(listId: ID!, _id: ID!): Boolean
    @aws_cognito_user_pools(cognito_groups: ["superadmin"])
  createPost(body: String!, media: [MediaInput]): Post
  updatePost(_id: ID!, body: String, media: [MediaInput]): Post
  deletePost(_id: ID!): Boolean
  createBookmark(parentId: String, bookmark: String!): Bookmark
  updateBookmark(_id: ID!, parentId: String, bookmark: String): Bookmark
  deleteBookmark(_id: ID!): Boolean
}

# type Subscription {}

type Bookmarks {
  data: [Bookmark]
  count: Int
}

type Bookmark {
  _id: ID
  parentId: String
  bookmark: String
  createdBy: ID
  updatedBy: ID
  createdAt: AWSDateTime
  updatedAt: AWSDateTime
}

type Posts @aws_api_key @aws_cognito_user_pools {
  data: [Post]
  count: Int
}

type Post @aws_api_key @aws_cognito_user_pools {
  _id: ID
  body: String
  media: [Media]
  createdBy: User
  updatedBy: ID
  createdAt: AWSDateTime
  updatedAt: AWSDateTime
}

type Media @aws_api_key @aws_cognito_user_pools {
  url: String
  caption: String
}

input MediaInput {
  url: String
  caption: String
}

type UserSearch @aws_cognito_user_pools(cognito_groups: ["superadmin"]) {
  users: [User]
  count: Int
}

type User @aws_api_key @aws_cognito_user_pools {
  _id: ID!
  userId: String!
  name: String!
  email: String!
  picture: String
  active: Boolean!
  confirmed: Boolean!
  createdAt: String
  createdBy: String
  updatedAt: String
  updatedBy: String
  subscription: TSubscription
}

type TSubscription {
  _id: ID
  active: Boolean
  subscriptionType: String
  description: String
  amount: Float
  subscribedOn: AWSDateTime
  expiringOn: AWSDateTime
}

input SubscriptionInput {
  active: Boolean!
  subscriptionType: String!
  description: String!
  amount: Float!
  subscribedOn: AWSDateTime
  expiringOn: AWSDateTime
}

type Lists {
  data: [List]
  count: Int
}

type List {
  _id: ID
  name: String
  active: Boolean
  inUse: Boolean
  items: [ListItem]
}

type ListItem {
  _id: ID
  title: String
  description: String
  active: Boolean
  media: [Media]
}

input ListItemInput {
  title: String
  description: String
  active: Boolean
  media: [MediaInput]
}
